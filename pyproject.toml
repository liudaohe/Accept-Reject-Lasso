[build-system]
requires = ["setuptools>=45", "wheel", "setuptools_scm[toml]>=6.2"]
build-backend = "setuptools.build_meta"

[project]
name = "lasso-feature-selector"
dynamic = ["version"]
description = "A comprehensive feature selection library with advanced rescue mechanisms"
readme = "README.md"
license = {file = "LICENSE"}
authors = [
    {name = "Your Name", email = "your.email@example.com"},
]
maintainers = [
    {name = "Your Name", email = "your.email@example.com"},
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Scientific/Engineering :: Information Analysis",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
keywords = [
    "feature-selection",
    "lasso",
    "machine-learning",
    "dimensionality-reduction",
    "high-dimensional-data",
    "correlation-analysis",
    "rescue-mechanism",
]
requires-python = ">=3.8"
dependencies = [
    "numpy>=1.19.0",
    "pandas>=1.3.0",
    "scikit-learn>=1.0.0",
    "joblib>=1.0.0",
    "tqdm>=4.60.0",
    "scipy>=1.7.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=6.0.0",
    "pytest-cov>=2.12.0",
    "pytest-mock>=3.6.0",
    "pytest-xdist>=2.3.0",
    "black>=21.0.0",
    "flake8>=3.9.0",
    "isort>=5.9.0",
    "mypy>=0.910",
    "pre-commit>=2.13.0",
]
docs = [
    "sphinx>=4.0.0",
    "sphinx-rtd-theme>=0.5.0",
    "sphinx-autodoc-typehints>=1.12.0",
    "nbsphinx>=0.8.0",
]
viz = [
    "matplotlib>=3.3.0",
    "seaborn>=0.11.0",
    "plotly>=5.0.0",
]
performance = [
    "numba>=0.53.0",
    "cython>=0.29.0",
]
all = [
    "lasso-feature-selector[dev,docs,viz,performance]",
]

[project.urls]
Homepage = "https://github.com/yourusername/lasso-feature-selector"
Documentation = "https://lasso-feature-selector.readthedocs.io/"
Repository = "https://github.com/yourusername/lasso-feature-selector.git"
"Bug Reports" = "https://github.com/yourusername/lasso-feature-selector/issues"
Changelog = "https://github.com/yourusername/lasso-feature-selector/blob/main/CHANGELOG.md"

[project.scripts]
lasso-pipeline = "lasso_feature_selector.cli:main"

[tool.setuptools]
packages = ["lasso_feature_selector"]

[tool.setuptools.dynamic]
version = {attr = "lasso_feature_selector.__version__"}

[tool.setuptools.package-data]
lasso_feature_selector = ["config/*.json", "examples/*.py", "examples/*.csv"]

[tool.black]
line-length = 88
target-version = ['py38']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["lasso_feature_selector"]

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "sklearn.*",
    "joblib.*",
    "tqdm.*",
    "matplotlib.*",
    "seaborn.*",
    "plotly.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["lasso_feature_selector"]
omit = [
    "*/tests/*",
    "*/test_*",
    "setup.py",
    "lasso_pipeline.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
